# https://rancher.com/docs/k3s/latest/en/upgrades/automated/
# https://github.com/rancher/system-upgrade-controller
# Server plan
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: k3s-server
  namespace: system-upgrade
  labels:
    k3s-upgrade: server
spec:
  concurrency: 1
  cordon: true
  nodeSelector:
    matchExpressions:
      - key: node-role.kubernetes.io/control-plane
        operator: In
        values: ["true"]
  serviceAccountName: system-upgrade
  secrets:
    - name: upgrade-scripts
      path: /bin/scripts/
  prepare:
    image: rancher/k3s-upgrade
    command:
      - "/bin/sh"
      - "/bin/scripts/migrate-zot-from-server-node.sh"
  drain:
    force: true
    skipWaitForDeleteTimeout: 300 # 1.18+ (honor pod disruption budgets up to 300 seconds per pod then moves on)
  upgrade:
    image: rancher/k3s-upgrade
  #renovate: k3s
  version: v1.33.4+k3s1
---
# Agent plan (not used currently)
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: k3s-agent
  namespace: system-upgrade
  labels:
    k3s-upgrade: agent
spec:
  concurrency: 1
  nodeSelector:
    matchExpressions:
      - key: node-role.kubernetes.io/control-plane
        operator: DoesNotExist
  prepare:
    args:
      - prepare
      - k3s-server
    image: rancher/k3s-upgrade
  serviceAccountName: system-upgrade
  drain:
    force: true
    skipWaitForDeleteTimeout: 300 # 1.18+ (honor pod disruption budgets up to 300 seconds per pod then moves on)
  upgrade:
    image: rancher/k3s-upgrade
  #renovate: k3s
  version: v1.33.4+k3s1
---
# Script to migrate zot away from the node that shall be upgraded before it starts draining
#
apiVersion: v1
kind: Secret
metadata:
  name: upgrade-scripts
  namespace: system-upgrade
type: Opaque
stringData:
  migrate-zot-from-server-node.sh: |
    #!/bin/sh
    set -ex
    KUBECTL_BIN="/opt/k3s kubectl"
    echo "Prepare upgrade for server: $HOSTNAME"
    ZOT_NODE_NAME=$($KUBECTL_BIN get pod -l app.kubernetes.io/instance=zot -n zot -o json | jq -r '.items[0].spec.nodeName')
    if [ "$HOSTNAME" = "$ZOT_NODE_NAME" ]; then
      echo "Migrating zot away from node $ZOT_NODE_NAME"
      $KUBECTL_BIN cordon $HOSTNAME
      $KUBECTL_BIN rollout restart deployment zot -n zot
      $KUBECTL_BIN rollout status deployment zot -n zot --timeout=300s
    else
      echo "Zot is not running on this node but on $ZOT_NODE_NAME"
    fi
---
# Role to allow system-upgrade service account to manage zot deployment
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: zot-migration-role
  namespace: zot
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "patch", "update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: zot-migration-rolebinding
  namespace: zot
subjects:
  - kind: ServiceAccount
    name: system-upgrade
    namespace: system-upgrade
roleRef:
  kind: Role
  name: zot-migration-role
  apiGroup: rbac.authorization.k8s.io
