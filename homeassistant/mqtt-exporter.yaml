---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-exporter-deployment
  labels:
    app: mqtt-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mqtt-exporter
  template:
    metadata:
      labels:
        app: mqtt-exporter
    spec:
      containers:
        - &mqtt-container
          name: broker-exporter
          # https://github.com/hikhvar/mqtt2prometheus/pkgs/container/mqtt2prometheus
          image: ghcr.io/hikhvar/mqtt2prometheus:v0.1.7
          command:
            - /mqtt2prometheus
            - -listen-port
            - "9641"
            - -config
            - /config/config-broker.yaml
          env:
            - name: MQTT2PROM_MQTT_USER
              valueFrom:
                secretKeyRef:
                  name: mqtt-secrets
                  key: user
            - name: MQTT2PROM_MQTT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mqtt-secrets
                  key: password
          ports:
            - containerPort: 9641
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
        - <<: *mqtt-container
          name: shelly-exporter
          command:
            - /mqtt2prometheus
            - -listen-port
            - "9642"
            - -config
            - /config/config-shelly.yaml
          ports:
            - containerPort: 9642
        - <<: *mqtt-container
          name: shelly25-exporter
          command:
            - /mqtt2prometheus
            - -listen-port
            - "9643"
            - -config
            - /config/config-shelly25.yaml
          ports:
            - containerPort: 9643
      volumes:
        - name: config
          configMap:
            name: mqtt-exporter-config
---
apiVersion: v1
kind: Service
metadata:
  name: mqtt-exporter
  labels:
    app: mqtt-exporter
spec:
  type: ClusterIP
  selector:
    app: mqtt-exporter
  ports:
    - name: broker-metrics
      protocol: TCP
      port: 9641
      targetPort: 9641
    - name: shelly-metrics
      protocol: TCP
      port: 9642
      targetPort: 9642
    - name: shelly25-metrics
      protocol: TCP
      port: 9643
      targetPort: 9643
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    release: prometheus
  name: mqtt-exporter
spec:
  endpoints:
    - path: /metrics
      port: broker-metrics
      # drop instance and pod from shelly metrics
      metricRelabelings:
        - sourceLabels:
            - __name__
            - instance
          regex: "mqtt_\\w*;.*"
          action: replace
          replacement: ""
          targetLabel: instance
        - sourceLabels:
            - __name__
            - pod
          regex: "mqtt_\\w*;.*"
          action: replace
          replacement: ""
          targetLabel: pod
    - path: /metrics
      port: shelly-metrics
      # drop instance and pod from shelly metrics
      metricRelabelings:
        - sourceLabels:
            - __name__
            - instance
          regex: "shelly_\\w*;.*"
          action: replace
          replacement: ""
          targetLabel: instance
        - sourceLabels:
            - __name__
            - pod
          regex: "shelly_\\w*;.*"
          action: replace
          replacement: ""
          targetLabel: pod
    - path: /metrics
      port: shelly25-metrics
      # drop instance and pod from shelly metrics
      metricRelabelings:
        - sourceLabels:
            - __name__
            - instance
          regex: "shelly_\\w*;.*"
          action: replace
          replacement: ""
          targetLabel: instance
        - sourceLabels:
            - __name__
            - pod
          regex: "shelly_\\w*;.*"
          action: replace
          replacement: ""
          targetLabel: pod
  selector:
    matchLabels:
      app: mqtt-exporter
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mqtt-exporter-config
data:
  config-broker.yaml: |-
    mqtt:
      # The MQTT broker to connect to, credentials go via env vars
      server: tcp://mosquitto.homeassistant.svc.cluster.local:1883
      client_id: broker-exporter
      # subscribe to mosquitto metrics
      topic_path: $SYS/broker/#
      # Optional: Regular expression to extract the device ID from the topic path. The default regular expression, assumes
      # that the last "element" of the topic_path is the device id.
      # The regular expression must contain a named capture group with the name deviceid
      # !! yaml and regexp escaping !!
      device_id_regex: "\\$SYS/(?P<deviceid>broker)/.*"
      # The MQTT QoS level
      qos: 0
      # Configures mqtt2prometheus to expect a single metric to be published as the value on an mqtt topic.
      metric_per_topic_config:
        # A regex used for extracting the metric name from the topic. Must contain a named group for `metricname`.
        # metric name =
        metric_name_regex: "\\$SYS/broker/(?P<metricname>.*)"
    cache:
      # Timeout. Each received metric will be presented for this time if no update is send via MQTT.
      # Set the timeout to -1 to disable the deletion of metrics from the cache. The exporter presents the ingest timestamp
      # to prometheus.
      timeout: -1
    # This is a list of valid metrics. Only metrics listed here will be exported
    metrics:
      - prom_name: mqtt_bytes_received_total
        mqtt_name: bytes/received
        type: counter
      - prom_name: mqtt_bytes_sent_total
        mqtt_name: bytes/sent
        type: counter

      - prom_name: mqtt_clients_expired
        mqtt_name: clients/expired
        type: gauge
      - prom_name: mqtt_clients_connected
        mqtt_name: clients/connected
        type: gauge
      - prom_name: mqtt_clients_maximum
        mqtt_name: clients/maximum
        type: gauge
      - prom_name: mqtt_clients_total
        mqtt_name: clients/total
        type: gauge

      - prom_name: mqtt_messages_inflight
        mqtt_name: messages/inflight
        type: gauge
      - prom_name: mqtt_messages_received_total
        mqtt_name: messages/received
        type: counter
      - prom_name: mqtt_messages_sent_total
        mqtt_name: messages/sent
        type: counter

      - prom_name: mqtt_publish_messages_dropped_total
        mqtt_name: publish/messages/dropped
        type: counter
      - prom_name: mqtt_publish_messages_received_total
        mqtt_name: publish/messages/received
        type: counter
      - prom_name: mqtt_publish_messages_sent_total
        mqtt_name: publish/messages/sent
        type: counter

      - prom_name: mqtt_retained_messages_count
        mqtt_name: "retained messages/count"
        type: gauge

      - prom_name: mqtt_store_messages_count
        mqtt_name: store/messages/count
        type: gauge
      - prom_name: mqtt_store_messages_bytes
        mqtt_name: store/messages/bytes
        type: gauge

      - prom_name: mqtt_subscriptions_count
        mqtt_name: subscriptions/count
        type: gauge

      - prom_name: mqtt_load_messages_received_1min
        mqtt_name: load/messages/received/1min
        type: gauge
      - prom_name: mqtt_load_messages_received_5min
        mqtt_name: load/messages/received/5min
        type: gauge
      - prom_name: mqtt_load_messages_received_15min
        mqtt_name: load/messages/received/15min
        type: gauge
      - prom_name: mqtt_load_messages_sent_1min
        mqtt_name: load/messages/sent/1min
        type: gauge
      - prom_name: mqtt_load_messages_sent_5min
        mqtt_name: load/messages/sent/5min
        type: gauge
      - prom_name: mqtt_load_messages_sent_15min
        mqtt_name: load/messages/sent/15min
        type: gauge

      - prom_name: mqtt_load_publish_received_1min
        mqtt_name: load/publish/received/1min
        type: gauge
      - prom_name: mqtt_load_publish_received_5min
        mqtt_name: load/publish/received/5min
        type: gauge
      - prom_name: mqtt_load_publish_received_15min
        mqtt_name: load/publish/received/15min
        type: gauge
      - prom_name: mqtt_load_publish_sent_1min
        mqtt_name: load/publish/sent/1min
        type: gauge
      - prom_name: mqtt_load_publish_sent_5min
        mqtt_name: load/publish/sent/5min
        type: gauge
      - prom_name: mqtt_load_publish_sent_15min
        mqtt_name: load/publish/sent/15min
        type: gauge

      - prom_name: mqtt_load_bytes_received_1min
        mqtt_name: load/bytes/received/1min
        type: gauge
      - prom_name: mqtt_load_bytes_received_5min
        mqtt_name: load/bytes/received/5min
        type: gauge
      - prom_name: mqtt_load_bytes_received_15min
        mqtt_name: load/bytes/received/15min
        type: gauge
      - prom_name: mqtt_load_bytes_sent_1min
        mqtt_name: load/bytes/sent/1min
        type: gauge
      - prom_name: mqtt_load_bytes_sent_5min
        mqtt_name: load/bytes/sent/5min
        type: gauge
      - prom_name: mqtt_load_bytes_sent_15min
        mqtt_name: load/bytes/sent/15min
        type: gauge

      - prom_name: mqtt_load_connections_1min
        mqtt_name: load/connections/1min
        type: gauge
      - prom_name: mqtt_load_connections_5min
        mqtt_name: load/connections/5min
        type: gauge
      - prom_name: mqtt_load_connections_15min
        mqtt_name: load/connections/15min
        type: gauge

      - prom_name: mqtt_load_sockets_1min
        mqtt_name: load/sockets/1min
        type: gauge
      - prom_name: mqtt_load_sockets_5min
        mqtt_name: load/sockets/5min
        type: gauge
      - prom_name: mqtt_load_sockets_15min
        mqtt_name: load/sockets/15min
        type: gauge

  config-shelly.yaml: |-
    mqtt:
      # The MQTT broker to connect to, credentials go via env vars
      server: tcp://mosquitto.homeassistant.svc.cluster.local:1883
      client_id: shelly-exporter
      # subscribe to mosquitto metrics
      topic_path: shellies/+/+
      # Optional: Regular expression to extract the device ID from the topic path. The default regular expression, assumes
      # that the last "element" of the topic_path is the device id.
      # The regular expression must contain a named capture group with the name deviceid
      # !! yaml and regexp escaping !!
      device_id_regex: "shellies/(?P<deviceid>[^/]+)/.*"
      # The MQTT QoS level
      qos: 0
      # Configures mqtt2prometheus to expect a single metric to be published as the value on an mqtt topic.
      metric_per_topic_config:
        # A regex used for extracting the metric name from the topic. Must contain a named group for `metricname`.
        # metric name =
        metric_name_regex: "shellies/(?P<deviceid>[^/]+)/(?P<metricname>.*)"
    cache:
      # Timeout. Each received metric will be presented for this time if no update is send via MQTT.
      # Set the timeout to -1 to disable the deletion of metrics from the cache. The exporter presents the ingest timestamp
      # to prometheus.
      timeout: 24h
    # This is a list of valid metrics. Only metrics listed here will be exported
    metrics:
      - prom_name: shelly_online
        mqtt_name: online
        type: gauge
        omit_timestamp: true
        string_value_mapping:
          # A map of string to metric value.
          map:
            true: 1
            false: 0
          # Metric value to use if a match cannot be found in the map above.
          # If not specified, parsing error will occur.
          error_value: 0
      - prom_name: shelly_temperature
        mqtt_name: temperature
        type: gauge

  config-shelly25.yaml: |-
    mqtt:
      # The MQTT broker to connect to, credentials go via env vars
      server: tcp://mosquitto.homeassistant.svc.cluster.local:1883
      client_id: shelly25-exporter
      # subscribe to mosquitto metrics
      topic_path: shellies/+/roller/0/+
      # Optional: Regular expression to extract the device ID from the topic path. The default regular expression, assumes
      # that the last "element" of the topic_path is the device id.
      # The regular expression must contain a named capture group with the name deviceid
      # !! yaml and regexp escaping !!
      device_id_regex: "shellies/(?P<deviceid>[^/]+)/.*"
      # The MQTT QoS level
      qos: 0
      # Configures mqtt2prometheus to expect a single metric to be published as the value on an mqtt topic.
      metric_per_topic_config:
        # A regex used for extracting the metric name from the topic. Must contain a named group for `metricname`.
        # metric name =
        metric_name_regex: "shellies/(?P<deviceid>[^/]+)/roller/0/(?P<metricname>.*)"
    cache:
      # Timeout. Each received metric will be presented for this time if no update is send via MQTT.
      # Set the timeout to -1 to disable the deletion of metrics from the cache. The exporter presents the ingest timestamp
      # to prometheus.
      timeout: -1
    # This is a list of valid metrics. Only metrics listed here will be exported
    metrics:
      - prom_name: shelly_position
        mqtt_name: pos
        type: gauge
      - prom_name: shelly_power
        mqtt_name: power
        type: gauge
